name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8 isort mypy
        pip install scikit-learn lightgbm xgboost lifelines
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: black --check .
    
    - name: Import sorting check with isort
      run: isort --check-only .
    
    - name: Type checking with mypy
      run: mypy src/ --ignore-missing-imports
      continue-on-error: true
    
    - name: Run unit tests
      run: |
        pytest tests/ --cov=src --cov-report=xml --cov-report=html -v
    
    - name: Test CLTV predictions
      run: |
        python -m pytest tests/ -k "cltv" -v
      continue-on-error: true
    
    - name: Test churn prediction models
      run: |
        python -m pytest tests/ -k "churn" -v
      continue-on-error: true
    
    - name: Test survival analysis
      run: |
        python -c "from lifelines import KaplanMeierFitter; print('Survival analysis libraries working')"
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  model-validation:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Validate model accuracy
      run: |
        python quick_start.py --test-mode --validate-models
      continue-on-error: true
    
    - name: Test prediction endpoints
      run: |
        python -c "
        import sys, os
        sys.path.append('.')
        try:
            from src.models.cltv_predictor import CLTVPredictor
            predictor = CLTVPredictor()
            print('CLTV model validation passed')
        except Exception as e:
            print(f'Model validation failed: {e}')
        "
      continue-on-error: true

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Security scan with bandit
      run: bandit -r src/
      continue-on-error: true
    
    - name: Dependency vulnerability check
      run: safety check
      continue-on-error: true

  docker-build:
    runs-on: ubuntu-latest
    needs: [test, model-validation]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -f docker/Dockerfile -t cltv-platform:${{ github.sha }} .
    
    - name: Test Docker container
      run: |
        docker run --rm -d --name cltv-test -p 8000:8000 cltv-platform:${{ github.sha }}
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop cltv-test

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test LangChain integration
      env:
        LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
      run: |
        python -c "
        try:
            from langchain.agents import AgentExecutor
            print('LangChain integration test passed')
        except ImportError:
            print('LangChain not configured')
        "
      continue-on-error: true
    
    - name: Test AWS integration
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-east-1
      run: |
        python -c "
        try:
            import boto3
            s3 = boto3.client('s3')
            print('AWS integration test passed')
        except Exception as e:
            print(f'AWS integration test failed: {e}')
        "
      continue-on-error: true